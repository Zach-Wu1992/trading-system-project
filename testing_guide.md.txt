專案測試指南
本指南將引導您如何獨立測試 app.py 中的兩個核心功能：視覺化儀表板和交易觸發 API。

事前準備
請確保您已經依照 README.md 的指示，安裝好所有必要的 Python 套件。如果尚未安裝 requests 套件，請執行：

pip install requests

第一部分：測試儀表板 (/)
這個測試的目的是驗證前端頁面能否正確地從資料庫讀取數據並渲染圖表和表格。

步驟 1: 產生測試數據

我們使用 test_data_generator.py 來快速填充資料庫。

停止所有正在運行的服務 (app.py 等)。

在您的終端機中執行：

python test_data_generator.py

您應該會看到數據生成完畢的成功訊息。

步驟 2: 啟動 Flask 應用程式

在終端機中，啟動主應用程式：

python app.py

步驟 3: 驗證結果

打開您的瀏覽器，訪問 http://localhost:5001。

預期結果：您應該能看到一個包含績效曲線圖和交易歷史表格的完整儀表板。

第二部分：測試交易觸發 API (/api/trigger-trade-check)
這個測試的目的是模擬 n8n，驗證我們的 API 端點是否能被正確觸發，並執行交易檢查邏輯。

步驟 1: 啟動 Flask 應用程式 (如果尚未啟動)

您需要開啟一個終端機。

啟動您的 Python 環境 (conda activate trading_env)。

執行 python app.py。

讓這個終端機保持運行，它是我們的伺服器。

步驟 2: 執行 API 測試腳本

再開啟一個全新的終端機 (不要關閉第一個)。

啟動您的 Python 環境 (conda activate trading_env)。

執行我們新的 test_api_caller.py 腳本：

python test_api_caller.py

步驟 3: 驗證結果

您需要同時觀察兩個終端機的輸出：

在執行 test_api_caller.py 的第二個終端機中：

預期結果：您應該會看到請求成功的訊息，以及從伺服器回傳的 JSON 回應。

🚀 正在準備發送 API 請求...
✅ API 請求成功！
   伺服器回應: {'status': 'success', 'message': '檢查完成。總資產: ...'}

在運行 app.py 的第一個終端機中：

預期結果：在您執行測試腳本的同時，這個視窗應該會印出交易機器人被觸發後執行的完整日誌。

🤖 [日期時間] API被觸發，開始執行交易檢查...
   當前狀態: ...
   最新價格 ...
   📈【執行買入】... (或任何交易動作)
   檢查完成。總資產: ...
🤖 [日期時間] 本次檢查結束。

如果兩邊的結果都符合預期，就代表您的 API 端點和授權機制都已設定正確且運作正常！